//go:generate go run .
//go:generate gofmt -w ../
package main

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"unicode"
)

func main() {
	files, _ := filepath.Glob("../*.go")
	names := []string{}

	for _, f := range files {
		base := filepath.Base(f)
		if unicode.IsUpper(rune(base[0])) {
			name := strings.TrimSuffix(base, filepath.Ext(base))
			names = append(names, name)
		}
	}

	fp, err := os.Create("../symbol.gen.go")
	if err != nil {
		fmt.Println(err)
		return
	}
	defer fp.Close()

	var buf bytes.Buffer

	buf.WriteString("// Code generated by go generate DO NOT EDIT.\n")
	buf.WriteString("package symbol\n")

	buf.WriteString("const (\n")
	for _, name := range names {
		buf.WriteString("\t")
		buf.WriteString(name)
		buf.WriteString("_ID")
		buf.WriteString(" = iota\n")
	}
	buf.WriteString(")\n")

	for _, name := range names {
		buf.WriteString("var ")
		buf.WriteString(name)
		buf.WriteString(" = SymbolType{}\n")
	}

	buf.WriteString("func init() {\n")

	for _, name := range names {
		fmt.Println(name)

		buf.WriteString(name)
		buf.WriteString(".ID = ")
		buf.WriteString(name)
		buf.WriteString("_ID ; ")

		buf.WriteString(name)
		buf.WriteString(".Name = ")
		buf.WriteString(`"`)
		buf.WriteString(name)
		buf.WriteString(`"`)
		buf.WriteString(" ; ")

		buf.WriteString("SymbolMap [")
		buf.WriteString(name)
		buf.WriteString(".Name] = &")
		buf.WriteString(name)
		buf.WriteString("\n")
	}

	buf.WriteString("}\n")

	os.WriteFile("../symbol.gen.go", buf.Bytes(), os.ModePerm)
}
